name: CI

on:
  push:
    branches:
      - main
      - staging/**
  pull_request:
    branches:
      - main
      - staging/**
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest

    concurrency:
      group: ci-${{ github.ref }}
      cancel-in-progress: true

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: messaging
          POSTGRES_USER: messaging
          POSTGRES_PASSWORD: messaging
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U messaging -d messaging" \
          --health-interval 5s \
          --health-timeout 5s \
          --health-retries 20

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Wait for Postgres
        env:
          PGPASSWORD: messaging
        run: |
          for i in {1..60}; do
            if pg_isready -h 127.0.0.1 -p 5433 -U messaging -d messaging; then
              break
            fi
            sleep 1
          done

      - name: Seed messaging schema
        env:
          PGPASSWORD: messaging
        run: |
          psql -h 127.0.0.1 -p 5433 -U messaging -d messaging -f services/messaging/schema.sql

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type Check
        run: pnpm exec tsc --noEmit

      - name: Tests
        env:
          DATABASE_URL: postgres://messaging:messaging@127.0.0.1:5433/messaging
        run: pnpm test --run --coverage

  coverage-gate:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests to produce coverage
        run: pnpm test --run --coverage

      - name: Enforce per-package coverage thresholds
        run: node scripts/check-coverage.mjs

  migrations-verify:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: messaging
          POSTGRES_USER: messaging
          POSTGRES_PASSWORD: messaging
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U messaging -d messaging" \
          --health-interval 5s \
          --health-timeout 5s \
          --health-retries 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for Postgres
        env:
          PGPASSWORD: messaging
        run: |
          for i in {1..60}; do
            if pg_isready -h 127.0.0.1 -p 5433 -U messaging -d messaging; then
              break
            fi
            sleep 1
          done

      - name: Apply schema (expand)
        env:
          PGPASSWORD: messaging
        run: psql -h 127.0.0.1 -p 5433 -U messaging -d messaging -f services/messaging/schema.sql

      - name: Smoke check tables exist
        env:
          PGPASSWORD: messaging
        run: |
          COUNT=$(psql -h 127.0.0.1 -p 5433 -U messaging -d messaging -t -c "select count(*) from information_schema.tables where table_schema='messaging';")
          echo "tables=$COUNT"
          test ${COUNT:-0} -gt 0

      - name: Contract (drop schema)
        env:
          PGPASSWORD: messaging
        run: psql -h 127.0.0.1 -p 5433 -U messaging -d messaging -c "drop schema if exists messaging cascade;"

      - name: Re-apply schema (expand again)
        env:
          PGPASSWORD: messaging
        run: psql -h 127.0.0.1 -p 5433 -U messaging -d messaging -f services/messaging/schema.sql

      - name: Final smoke
        env:
          PGPASSWORD: messaging
        run: |
          COUNT=$(psql -h 127.0.0.1 -p 5433 -U messaging -d messaging -t -c "select count(*) from information_schema.tables where table_schema='messaging';")
          echo "tables=$COUNT"
          test ${COUNT:-0} -gt 0

  secrets-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --no-git -v --redact

  dependency-review:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/dependency-review-action@v4

  dockerfile-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Hadolint Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: |
            services/auth/Dockerfile

  trivy-sarif:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Trivy FS scan
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
          --health-start-period=30s

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
          --health-start-period=20s

    env:
      CI: true
      NODE_ENV: test
      STORAGE_DRIVER: memory
      # Use localhost with mapped ports (more reliable in GH Actions)
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
      POSTGRES_URL: postgres://postgres:postgres@localhost:5432/postgres
      REDIS_URL: redis://localhost:6379
      # JWT defaults to avoid schema failures
      JWT_SECRET: test-secret-min-32-chars-long-for-security
      JWT_ISSUER: sanctum-auth
      JWT_AUDIENCE: sanctum-client
      # Disable captcha/externals in CI
      CAPTCHA_PROVIDER: none
      KMS_MODE: inmemory
      RATE_LIMIT_DISABLED: 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Enable corepack
        run: corepack enable

      - name: Prepare pnpm via corepack
        run: corepack prepare pnpm@9 --activate

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Print environment for debugging
        run: |
          node -v
          pnpm -v
          echo "WORKSPACE DIR: $(pwd)"
          ls -la

      - name: Install PostgreSQL and Redis clients
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y postgresql-client redis-tools
          echo "‚úÖ Installed pg_isready and redis-cli"
          pg_isready --version
          redis-cli --version

      - name: Wait for Postgres
        run: |
          echo "‚è≥ Waiting for Postgres to be ready on localhost:5432..."
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres -d postgres >/dev/null 2>&1; then
              echo "‚úÖ Postgres is ready!"
              PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "SELECT version();"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Postgres failed to start"
              pg_isready -h localhost -p 5432 -U postgres -d postgres || true
              exit 1
            fi
            echo "  Attempt $i/30..."
            sleep 2
          done

      - name: Wait for Redis
        run: |
          echo "‚è≥ Waiting for Redis to be ready on localhost:6379..."
          for i in {1..30}; do
            if redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; then
              echo "‚úÖ Redis is ready!"
              redis-cli -h localhost -p 6379 INFO server | head -5
              break
            fi
            if [ $i -eq 30 ]; then
              echo "‚ùå Redis failed to start"
              redis-cli -h localhost -p 6379 ping || true
              exit 1
            fi
            echo "  Attempt $i/30..."
            sleep 2
          done

      - name: Verify database connectivity
        run: |
          echo "üîç Verifying database connectivity..."
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "
            SELECT 
              current_database() as database,
              current_user as user,
              version() as version;
          "
          echo "‚úÖ Database is ready and accepting queries"
          
          echo "üîç Verifying Redis connectivity..."
          redis-cli -h localhost -p 6379 SET test_ci_key "ci_works"
          redis-cli -h localhost -p 6379 GET test_ci_key
          redis-cli -h localhost -p 6379 DEL test_ci_key
          echo "‚úÖ Redis is ready and accepting commands"

      - name: Typecheck
        run: pnpm typecheck

      - name: Lint
        run: pnpm lint

      - name: Run tests with coverage
        run: |
          echo "üß™ Running tests with coverage..."
          echo "Environment check:"
          echo "  DATABASE_URL: ${DATABASE_URL}"
          echo "  REDIS_URL: ${REDIS_URL}"
          echo "  NODE_ENV: ${NODE_ENV}"
          pnpm test

      - name: Enforce coverage thresholds
        run: |
          echo "üìä Checking coverage thresholds..."
          pnpm run check:coverage

