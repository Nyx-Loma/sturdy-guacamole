name: CI

on:
  push:
    branches: [main, develop, 'ci/**']
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      messaging-db:
        image: postgres:16
        env:
          POSTGRES_DB: messaging
          POSTGRES_USER: messaging
          POSTGRES_PASSWORD: messaging
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U messaging -d messaging"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: s3
          DEBUG: 0
          DATA_DIR: /tmp/localstack/data
          DOCKER_HOST: unix:///var/run/docker.sock
        ports:
          - 4566:4566
        options: >-
          --health-cmd "awslocal s3 ls || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Phase 1: Debug Database Connectivity
      - name: Debug - Verify PostgreSQL service
        run: |
          echo "üîç Checking PostgreSQL connectivity..."
          echo "Service name: messaging-db"
          echo "Port mapping: 5433 (host) -> 5432 (container)"
          echo "Database URL: postgresql://messaging:messaging@localhost:5433/messaging"
          
          # Check if port is open
          echo "üì° Checking if port 5433 is open..."
          nc -zv localhost 5433 || echo "‚ùå Port 5433 not accessible"
          
          # Try to connect with pg_isready
          echo "üè• Running pg_isready health check..."
          pg_isready -h localhost -p 5433 -U messaging -d messaging -t 10 || echo "‚ùå pg_isready failed"
          
          # Try basic connection
          echo "üîå Testing basic connection..."
          PGPASSWORD=messaging psql -h localhost -p 5433 -U messaging -d messaging -c "SELECT version();" || echo "‚ùå Connection test failed"

      # Phase 3: Verify Schema Application with Error Checking
      - name: Initialize database schema
        run: |
          echo "üìã Applying database schema..."
          
          # Apply schema with error handling
          if PGPASSWORD=messaging psql -h localhost -p 5433 -U messaging -d messaging -f services/messaging/schema.sql; then
            echo "‚úÖ Schema applied successfully"
          else
            echo "‚ùå Schema application failed!"
            exit 1
          fi
          
          # Verify tables were created
          echo "üîç Verifying tables exist..."
          TABLE_COUNT=$(PGPASSWORD=messaging psql -h localhost -p 5433 -U messaging -d messaging -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'messaging';")
          
          echo "Found $TABLE_COUNT tables in messaging schema"
          
          if [ "$TABLE_COUNT" -gt 0 ]; then
            echo "‚úÖ Database schema verified"
            
            # List the tables
            echo "üìä Tables in messaging schema:"
            PGPASSWORD=messaging psql -h localhost -p 5433 -U messaging -d messaging -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'messaging' ORDER BY table_name;"
          else
            echo "‚ùå No tables found in messaging schema!"
            exit 1
          fi
        env:
          DATABASE_URL: postgresql://messaging:messaging@localhost:5433/messaging

      - name: Run linter
        run: pnpm lint

      - name: Run type check
        run: pnpm typecheck

      # Phase 4: Test Environment Validation
      - name: Validate test environment
        run: |
          echo "üß™ Validating test environment before running tests..."
          
          # Quick connection test
          echo "Testing database connection..."
          if PGPASSWORD=messaging psql -h localhost -p 5433 -U messaging -d messaging -c "SELECT 1;" > /dev/null 2>&1; then
            echo "‚úÖ Database connection successful"
          else
            echo "‚ùå Database connection failed - tests will be skipped"
            echo "‚ö†Ô∏è  This will cause coverage to drop below thresholds"
            exit 1
          fi
          
          # Verify tables still exist
          TABLE_COUNT=$(PGPASSWORD=messaging psql -h localhost -p 5433 -U messaging -d messaging -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'messaging';")
          
          if [ "$TABLE_COUNT" -gt 0 ]; then
            echo "‚úÖ Database schema intact ($TABLE_COUNT tables)"
          else
            echo "‚ùå Database schema missing!"
            exit 1
          fi
          
          echo "üéØ Environment ready for integration tests"

      - name: Setup LocalStack S3 bucket
        run: |
          echo "ü™£ Creating S3 test bucket in LocalStack..."
          pip install awscli-local
          awslocal s3 mb s3://test-bucket --endpoint-url=http://localhost:4566 || echo "Bucket may already exist"
          awslocal s3 ls --endpoint-url=http://localhost:4566
          echo "‚úÖ LocalStack S3 ready"

      - name: Run tests
        run: pnpm test
        env:
          DATABASE_URL: postgresql://messaging:messaging@localhost:5433/messaging
          REDIS_URL: redis://localhost:6379
          STORAGE_TEST_REDIS_URL: redis://localhost:6379
          S3_ENDPOINT: http://localhost:4566
          S3_BUCKET: test-bucket
          S3_ACCESS_KEY_ID: test
          S3_SECRET_ACCESS_KEY: test
          STORAGE_TEST_S3_ENDPOINT: http://localhost:4566
          STORAGE_TEST_S3_REGION: us-east-1
          STORAGE_TEST_S3_BUCKET: test-bucket
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_REGION: us-east-1
          NODE_ENV: test
          CI: true

      - name: Check coverage
        run: pnpm check:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
